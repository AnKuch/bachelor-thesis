theory System_TI
imports LaTeXsugar

begin

type_synonym entity_id = nat

datatype rights = Read|Write|Grant|Create|Take|Store

record cap =  entity :: entity_id
              rights :: "rights set"

record entity =   caps :: "cap set"
                  eValue :: nat

record state =  heap :: "entity_id \<Rightarrow> entity"
                next_id :: entity_id

type_synonym modify_state = "state \<Rightarrow> state"


datatype sysOPs =
    SysNoOp entity_id
  | SysRead entity_id cap 
  | SysWrite entity_id cap 
  | SysCreate entity_id cap cap
  | SysGrant  entity_id cap cap "rights set"
  | SysRemove entity_id cap cap

definition
  all_rights :: "rights set" where
  "all_rights \<equiv> UNIV"

definition
  caps_of :: "state \<Rightarrow> entity_id \<Rightarrow> cap set" where
  "caps_of s sref \<equiv> caps (heap s sref)"

definition
  grant_cap :: "entity_id \<Rightarrow> cap" where
  "grant_cap e \<equiv> \<lparr>entity = e, rights = {Grant}\<rparr>"

definition
  read_cap :: "entity_id \<Rightarrow> cap" where
  "read_cap e\<^sub>x \<equiv> \<lparr>entity = e\<^sub>x, rights = {Read}\<rparr>"

definition
  write_cap :: "entity_id \<Rightarrow> cap" where
  "write_cap e\<^sub>x \<equiv> \<lparr>entity = e\<^sub>x, rights = {Write}\<rparr>"

definition
  take_cap :: "entity_id \<Rightarrow> cap" where
  "take_cap e\<^sub>x \<equiv> \<lparr>entity = e\<^sub>x, rights = {Take}\<rparr>"

definition
  create_cap :: "entity_id \<Rightarrow> cap" where
  "create_cap e\<^sub>x \<equiv> \<lparr>entity = e\<^sub>x, rights = {Create}\<rparr>"

definition
  store_cap :: "entity_id \<Rightarrow> cap" where
  "store_cap e \<equiv> \<lparr>entity = e, rights = {Store}\<rparr>"

definition
  full_cap :: "entity_id \<Rightarrow> cap" where
  "full_cap e \<equiv> \<lparr>entity = e, rights = all_rights \<rparr>"

definition
  lessCap :: "cap \<Rightarrow> cap set \<Rightarrow> bool" where
  "lessCap c C \<equiv> \<exists> d\<in>C. entity c = entity d \<and> rights c \<subseteq> rights d"

definition
  leak :: "state \<Rightarrow> entity_id \<Rightarrow> entity_id \<Rightarrow> bool" where
  "leak s e\<^sub>x e\<^sub>y \<equiv> lessCap (grant_cap e\<^sub>y) (caps_of s e\<^sub>x)"

definition
  connected :: "state \<Rightarrow> entity_id \<Rightarrow> entity_id \<Rightarrow> bool" ("_ \<turnstile> _ \<leftrightarrow> _") where
  "connected s e\<^sub>x e\<^sub>y \<equiv> leak s e\<^sub>x e\<^sub>y \<or> leak s e\<^sub>y e\<^sub>x"


definition
  directly_connected :: "state \<Rightarrow> (entity_id \<times> entity_id) set" where
  "directly_connected s \<equiv> {(e\<^sub>x, e\<^sub>y). leak s e\<^sub>x e\<^sub>y \<or> leak s e\<^sub>y e\<^sub>x}"

definition
  conc_connected :: "state \<Rightarrow> (entity_id \<times> entity_id) set" where
  "conc_connected s \<equiv> (directly_connected s)\<^sup>*"

definition
  in_conc_connected :: "state \<Rightarrow> entity_id \<Rightarrow> entity_id \<Rightarrow> bool"  where
  "in_conc_connected s x y \<equiv> (x,y) \<in> conc_connected s"

type_synonym subSysT = "entity_id set"

definition
  subSys :: "state \<Rightarrow> entity_id \<Rightarrow> subSysT" where
  "subSys s x \<equiv> {e\<^sub>i. in_conc_connected s x e\<^sub>i}"

definition
  isEntityOf :: "state \<Rightarrow> entity_id \<Rightarrow> bool" where
  "isEntityOf s e \<equiv> e < next_id s"

definition
  value_of :: "state \<Rightarrow> entity_id \<Rightarrow> nat" where
  "value_of s sref \<equiv> eValue(heap s sref)"

definition
  aquiv_nonin :: "state \<Rightarrow> state \<Rightarrow> subSysT \<Rightarrow> bool" where
  "aquiv_nonin s t d \<equiv> \<forall> e\<in>d. value_of s e = value_of t e"

definition
  set_flow :: "state \<Rightarrow> (subSysT \<times> subSysT) set" where
  "set_flow s \<equiv> {(X,Y). \<exists>x\<in>X. \<exists>y\<in>Y. (read_cap x \<in>caps_of s y \<or> 
                                      write_cap y \<in>caps_of s x)}"

primrec
  legal :: "sysOPs \<Rightarrow> state \<Rightarrow> bool"
  where
  "legal (SysNoOp e) s          = isEntityOf s e"
| "legal (SysCreate e c\<^sub>1 c\<^sub>2) s  = (isEntityOf s e \<and> {c\<^sub>1, c\<^sub>2} \<subseteq> caps_of s e \<and>
                                   Grant \<in> rights c\<^sub>2 \<and> Create \<in> rights c\<^sub>2)" 
| "legal (SysRead e c) s = (isEntityOf s e \<and> c \<in> caps_of s e \<and> Read \<in> rights c)"
| "legal (SysWrite e c) s = (isEntityOf s e \<and> c \<in> caps_of s e \<and> Write \<in> rights c)"
| "legal (SysGrant e c\<^sub>1 c\<^sub>2 r) s = (isEntityOf s e \<and>  isEntityOf s (entity c\<^sub>1) \<and>
                                  {c\<^sub>1,c\<^sub>2} \<subseteq> caps_of s e \<and> Grant \<in> rights c\<^sub>1)"

| "legal (SysRemove e c\<^sub>1 c\<^sub>2) s  = (isEntityOf s e \<and> c\<^sub>1 \<in> caps_of s e)"


definition
  diminish :: "cap \<Rightarrow> rights set \<Rightarrow> cap" where
  "diminish c R \<equiv> c\<lparr>rights := rights c \<inter> R\<rparr>"

definition
  createOperation :: "entity_id \<Rightarrow> cap \<Rightarrow> cap \<Rightarrow> modify_state" where
  "createOperation e c\<^sub>1 c\<^sub>2 s \<equiv> 
            let nullEntity = \<lparr>caps = {}, eValue = 0\<rparr>;
                newCap = \<lparr>entity = next_id s, rights = all_rights\<rparr>;
                newTarget = \<lparr>caps = {newCap} \<union> caps_of s (entity c\<^sub>2), eValue = 0\<rparr>
            in s\<lparr>heap := (heap s)(entity c\<^sub>1 := newTarget, next_id s := nullEntity), next_id := next_id s+1\<rparr>"

definition
  grantOperation :: "entity_id \<Rightarrow> cap \<Rightarrow> cap \<Rightarrow> rights set \<Rightarrow> modify_state" where
  "grantOperation e c\<^sub>1 c\<^sub>2 R s \<equiv>
  s\<lparr>heap := (heap s)(entity c\<^sub>1 := \<lparr>caps = {diminish c\<^sub>2 R} \<union> caps_of s (entity c\<^sub>1), eValue = value_of s (entity c\<^sub>1)\<rparr> )\<rparr>"

definition
  removeOperation :: "entity_id \<Rightarrow> cap \<Rightarrow> cap \<Rightarrow> modify_state" where
  "removeOperation e c\<^sub>1 c\<^sub>2 s \<equiv> s\<lparr>heap := (heap s)(entity c\<^sub>1 := \<lparr>caps = caps_of s (entity c\<^sub>1) - {c\<^sub>2}, eValue = value_of s (entity c\<^sub>1)\<rparr>)\<rparr>"

definition
  readOperation :: "entity_id \<Rightarrow> cap \<Rightarrow> modify_state" where
  "readOperation e c s \<equiv> s\<lparr>heap := (heap s)(e:= \<lparr>caps = caps_of s e, eValue = value_of s (entity c)\<rparr>)\<rparr>" 

definition
  writeOperation :: "entity_id \<Rightarrow> cap \<Rightarrow> modify_state" where
  "writeOperation e c s \<equiv> s\<lparr>heap := (heap s)(entity c := \<lparr>caps = caps_of s (entity c), eValue = value_of s e\<rparr>)\<rparr>"

primrec
  step' :: "sysOPs \<Rightarrow> modify_state" where
  "step' (SysNoOp e) s = s"
| "step' (SysRead e c) s = readOperation e c s"
| "step' (SysWrite e c) s = writeOperation e c s"
| "step' (SysCreate e c\<^sub>1 c\<^sub>2) s = createOperation e c\<^sub>1 c\<^sub>2 s"
| "step' (SysGrant e c\<^sub>1 c\<^sub>2 R) s = grantOperation e c\<^sub>1 c\<^sub>2 R s"
| "step' (SysRemove e c\<^sub>1 c\<^sub>2) s = removeOperation e c\<^sub>1 c\<^sub>2 s"

definition
  step :: "sysOPs \<Rightarrow> modify_state" where
  "step cmd s \<equiv> if legal cmd s then step' cmd s else s"

definition
  execute :: "sysOPs list \<Rightarrow> modify_state" where
  "execute = foldr step"

definition
  interf :: "subSysT \<Rightarrow> subSysT \<Rightarrow> state \<Rightarrow> bool" where 
  "interf X Y s   \<equiv> (X,Y) \<in> set_flow s" 

definition
  confid :: "bool" where
  "confid \<equiv> \<forall> s t as s' t' u v. aquiv_nonin s t u \<and> s'=execute as s \<and> t'=execute as t \<and>
            (interf v u s \<and> interf v u t \<longrightarrow> aquiv_nonin s t v) \<longrightarrow> aquiv_nonin s' t' u"